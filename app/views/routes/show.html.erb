<div class="container-fluid mt-3">
  <div class="row">
    <div class="col-md-3">
      <div class="card shadow mb-3">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">Detalles de la Ruta</h5>
        </div>
        <div class="card-body">
          <div class="mb-3 p-3 bg-light rounded">
            <h6 class="border-bottom pb-2 mb-2">Tu solicitud:</h6>
            <p class="text-muted fst-italic"><%= @original_prompt %></p>
          </div>

          <p><strong>Origen:</strong> <%= @origin %></p>

          <% if @waypoints.any? %>
            <p><strong>Puntos intermedios:</strong></p>
            <ol>
              <% @waypoints.each do |waypoint| %>
                <li><%= waypoint %></li>
              <% end %>
            </ol>
          <% end %>

          <p><strong>Destino:</strong> <%= @destination %></p>

          <div id="route-info" class="bg-light p-3 rounded mt-3">
            <p><strong>Distancia total:</strong> <span id="total-distance">Calculando...</span></p>
            <p><strong>Tiempo estimado:</strong> <span id="total-duration">Calculando...</span></p>
          </div>

          <div class="mt-3">
            <a href="<%= new_route_path %>?t=<%= Time.now.to_i %>" class="btn btn-primary w-100">Nueva Ruta</a>
          </div>
        </div>
      </div>

      <div class="card shadow">
        <div class="card-header bg-light">
          <h5 class="mb-0">Instrucciones de ruta</h5>
        </div>
        <div class="card-body p-0">
          <div id="directions-panel" style="height: 300px; overflow-y: auto; padding: 10px;"></div>
        </div>
      </div>
    </div>

    <div class="col-md-9">
      <div class="card shadow">
        <div class="card-body p-0">
          <div id="map" style="width: 100%; height: 700px;"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let map;
  let directionsService;
  let directionsRenderer;

  // Añadir un identificador único para cada carga del mapa
  const mapInitId = Date.now();

  function initMap() {
    console.log(`Inicializando mapa nuevo: ${mapInitId}`);

    // Coordenadas de Barranquilla
    const barranquilla = { lat: 11.0041, lng: -74.8070 };

    // Destruir instancias previas si existen
    if (directionsRenderer) {
      directionsRenderer.setMap(null);
    }

    // Crear el mapa con un ID único para evitar problemas de caché
    const mapElement = document.getElementById("map");
    mapElement.innerHTML = ''; // Limpiar el contenedor

    map = new google.maps.Map(mapElement, {
      zoom: 13,
      center: barranquilla,
    });

    // Inicializar nuevas instancias del servicio de direcciones y el renderizador
    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer({
      map: map,
      panel: document.getElementById("directions-panel")
    });

    // Limpiar el panel de direcciones
    const directionsPanel = document.getElementById("directions-panel");
    if (directionsPanel) {
      directionsPanel.innerHTML = '';
    }

    // Calcular y mostrar la ruta
    calculateAndDisplayRoute();
  }

  function calculateAndDisplayRoute() {
    // Reiniciar los elementos de información
    document.getElementById("total-distance").textContent = "Calculando...";
    document.getElementById("total-duration").textContent = "Calculando...";

    // Obtener los waypoints actuales (no los almacenados en caché)
    const waypointsParam = "<%= @waypoints.join('|') %>";
    const waypointsArray = waypointsParam.split('|').filter(wp => wp.trim() !== '').map(point => {
      return {
        location: point,
        stopover: true
      };
    });

    // Obtener el origen y destino actuales
    const origin = "<%= @origin %>";
    const destination = "<%= @destination %>";

    console.log(`Calculando ruta de ${origin} a ${destination} con ${waypointsArray.length} paradas`);

    // Configurar la solicitud de ruta
    const request = {
      origin: origin,
      destination: destination,
      waypoints: waypointsArray,
      optimizeWaypoints: false,
      travelMode: google.maps.TravelMode.DRIVING,
      region: "co"
    };

    // Solicitar la ruta con una marca de tiempo para evitar caché
    directionsService.route(request, (result, status) => {
      if (status === "OK") {
        console.log("Ruta calculada exitosamente");
        directionsRenderer.setDirections(result);

        // Mostrar información de la ruta
        const route = result.routes[0];
        let totalDistance = 0;
        let totalDuration = 0;

        // Sumar las distancias y duraciones de todos los segmentos
        const legs = route.legs;
        for (let i = 0; i < legs.length; i++) {
          totalDistance += legs[i].distance.value;
          totalDuration += legs[i].duration.value;
        }

        // Convertir a km y mostrar
        document.getElementById("total-distance").textContent =
          (totalDistance / 1000).toFixed(1) + " km";

        // Convertir segundos a formato horas y minutos
        const hours = Math.floor(totalDuration / 3600);
        const minutes = Math.floor((totalDuration % 3600) / 60);

        let durationText = "";
        if (hours > 0) {
          durationText += hours + " hora" + (hours > 1 ? "s" : "") + " ";
        }
        durationText += minutes + " minuto" + (minutes > 1 ? "s" : "");

        document.getElementById("total-duration").textContent = durationText;
      } else {
        console.error("Error al calcular la ruta:", status);
        window.alert("No se pudo calcular la ruta: " + status);
      }
    });
  }

  // Asegurarnos de que el mapa se inicialice correctamente cuando la página esté lista
  document.addEventListener('DOMContentLoaded', function() {
    // Verificar si la API de Google Maps ya está cargada
    if (window.google && window.google.maps) {
      initMap();
    }
  });

  // Evitar problemas de caché al cargar la API
  function loadGoogleMapsScript() {
    const script = document.createElement('script');
    script.src = "https://maps.googleapis.com/maps/api/js?key=<%= @api_key %>&callback=initMap&libraries=places&v=" + new Date().getTime();
    script.async = true;
    script.defer = true;
    document.head.appendChild(script);
  }

  // Cargar el script si aún no está cargado
  if (!window.google || !window.google.maps) {
    loadGoogleMapsScript();
  }
</script>

<!-- Cargar la API de Google Maps -->
<script src="https://maps.googleapis.com/maps/api/js?key=<%= @api_key %>&callback=initMap&libraries=places" async defer></script>